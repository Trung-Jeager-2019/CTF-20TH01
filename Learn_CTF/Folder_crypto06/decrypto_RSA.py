
# We have p | n | e | c | ?:q
# Library
import gmpy2
import binascii
import primefac

c = 6835919450637988171807262668571934814983317881554213146053256570329518637256568916689283342575984530728444756307105506069722032737885594402262112119924989972671577272399990192454968325364040444142295083642662120771648503061538241629286280044587506410555629404371139089565036228243193258221727594911427
n = 129289655653848497153395878323360219185920570202980105915744463215125944515708989206739345364813135699885709099962938759507458816031822451560054811825012376465903316724680457268437677799783976399712459904191106879601061535274950314540757077731272294493261558115426852734020135359895786600449469054307405569871
e = 65537

# find the prime factors
primes = list(primefac.primefac(n))

# compute totient
r = 1
for p in primes:
    r *= p-1

d = gmpy2.divm(1,e,r)

pt = gmpy2.powmod(c,d,n)
print('Káº¿t quáº£ Byte Hex: ', pt)
print('Káº¿t quáº£ chuá»—i Hex: ',binascii.unhexlify(hex(int(pt))[2:]))


# pt = 168674572898678246183111547923985547062218148376430
# result = b'simple_rsa_decryption'
